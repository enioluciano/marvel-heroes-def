// Mocks generated by Mockito 5.1.0 from annotations
// in project_test/test/core/helpers/logger.dart.
// Do not manually edit this file.

import 'package:mockito/mockito.dart' as _i1;
import 'package:project_test/app/core/helpers/logger.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [Logger].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogger extends _i1.Mock implements _i2.Logger {
  MockLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void debug(dynamic message, [dynamic error, StackTrace? stackTrace]) => super
      .noSuchMethod(Invocation.method(#debug, [message, error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void info(dynamic message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#info, [message, error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void warning(dynamic message, {dynamic error, StackTrace? stackTrace}) =>
      super.noSuchMethod(
          Invocation.method(
              #warning, [message], {#error: error, #stackTrace: stackTrace}),
          returnValueForMissingStub: null);
  @override
  void error(dynamic message, [dynamic error, StackTrace? stackTrace]) => super
      .noSuchMethod(Invocation.method(#error, [message, error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void append(dynamic message) =>
      super.noSuchMethod(Invocation.method(#append, [message]),
          returnValueForMissingStub: null);
  @override
  void closeAppend() => super.noSuchMethod(Invocation.method(#closeAppend, []),
      returnValueForMissingStub: null);
}
